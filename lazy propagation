#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define rep(i,n) for (int i=1;i <=int(n);i++)
#define rrep(i,n) for (int i=int(n); i >= 1; i--)

struct T{
     int n4,n7,n47,n74;
};
T a[4000009];int laz[4000009];
string s;

void up(int i){
     a[i].n4 = a[i*2].n4 + a[i*2+1].n4;
     a[i].n7 = a[i*2].n7 + a[i*2+1].n7;
     a[i].n47 = max(a[i*2].n47 + a[i*2+1].n7, a[i*2].n4 + a[i*2+1].n47);
     a[i].n74 = max(a[i*2].n74 + a[i*2+1].n4, a[i*2].n7 + a[i*2+1].n74);
          
}

void build(int i,int l, int r){
     
     laz[i]=-1;
     if (l==r) {
          char c= s[l-1];
          if (c=='4'){
               a[i].n4=1;
          }
          else {
               a[i].n7=1;
          }
          a[i].n47=1;
          a[i].n74=1;
         
          return;
     }
     int mid=(l+r)/2;
     build(i*2,l,mid);
     build(i*2+1,mid+1,r);
     up(i);
     
}
void modify(int i,int l,int r){
      
     laz[i]= -laz[i];
     swap(a[i].n47,a[i].n74);
     swap(a[i].n4,a[i].n7);
}

void push(int i,int l,int r){
     
     if (laz[i]==-1) return;
     if (l!=r){  int mid=(l+r)/2;
          
          //left child
          modify(i*2,l,mid);
          modify(i*2+1,mid+1,r);
       
          // right child
        
          laz[i]=-1;
     }
    

}
T combine(T a, T b){
     T c;
     
     return c;
}
/*T get(int i,int l,int r,int ll, int rr){
      
     if (l > rr || r < ll ) return 0;
     if (l >= ll && r <= rr){
          return a[i];
     }
     push(i,l,r);
     int mid=(l+r)/2;
     return combine(get(i*2,l,mid,ll,rr),get(i*2+1,mid+1,r,ll,rr));
     
}

T gett(int i,int l,int r,int ind){
     
     if (l == ind){
          return a[i];
     }
     push(i,l,r);
     int mid=(l+r)/2;
     if (ind <= mid) return gett(i*2,l,mid,ind);
     return gett(i*2+1,mid+1,r,ind);
     
}*/


void upd(int i,int l,int r,int ll,int rr){
   
     if (l > rr || r < ll ) return;  //  ll - rr  -  l - r  ||   l - r  - ll - rr
     if (l >= ll && r <= rr){
          modify(i,l,r);
          return;
     }
     push(i,l,r);
     int mid= (l+r)/2;
     
     upd(i*2,l,mid,ll,rr);
     
     upd(i*2+1,mid+1,r,ll,rr);
     
     up(i);
     return;
}
int main(){
    ios_base::sync_with_stdio(false);
     cin.tie(NULL);
     int n,m; cin >> n >> m;
     cin >> s;
     build(1,1,n);
     rep(i,m) {
          string t; cin >> t;
          if (t=="switch") {
               int l,r; cin >> l >> r;
               upd(1,1,n,l,r);
          }
          else {
               cout << a[1].n47 << '\n';
          }
     }
   
     
          
     
     return 0;
}
